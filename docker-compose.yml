version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: mycloudx-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: mycloudx
      MYSQL_USER: mycloudx
      MYSQL_PASSWORD: mycloudxpassword
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - mycloudx-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: mycloudx-backend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DATABASE_URL=mysql://mycloudx:mycloudxpassword@mysql:3306/mycloudx
      - JWT_SECRET=your-super-secret-jwt-key-change-this-in-production
      - JWT_EXPIRES_IN=7d
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - SMTP_FROM=${SMTP_FROM}
      - PORT=5000
      - CORS_ORIGIN=http://localhost:3000
    ports:
      - "5000:5000"
    depends_on:
      - mysql
    networks:
      - mycloudx-network
    volumes:
      - ./backend/uploads:/app/uploads

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: mycloudx-frontend
    restart: unless-stopped
    environment:
      - REACT_APP_API_URL=http://localhost:5000/api
      - REACT_APP_S3_BUCKET=${AWS_S3_BUCKET}
      - REACT_APP_FRONTEND_URL=http://localhost:3000
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - mycloudx-network

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: mycloudx-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - mycloudx-network

volumes:
  mysql_data:

networks:
  mycloudx-network:
    driver: bridge 